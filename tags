!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/4f9f6f83/
%.o	Makefile	/^%.o: %.c$/;"	t
CC	Makefile	/^CC = gcc$/;"	m
CONSTANTS	utility.h	/^#define CONSTANTS /;"	d
CUBATURE_H	cubature.h	/^#define CUBATURE_H$/;"	d
ERR	hcubature.c	/^#define ERR(/;"	d	file:
ERROR_INDIVIDUAL	cubature.h	/^     ERROR_INDIVIDUAL = 0, \/* individual relerr criteria in each component *\/$/;"	e	enum:__anonb5c3fad60103
ERROR_L1	cubature.h	/^     ERROR_L1, \/* abserr is L_1 norm |e|, and relerr is |e|\/|v| *\/$/;"	e	enum:__anonb5c3fad60103
ERROR_L2	cubature.h	/^     ERROR_L2, \/* abserr is L_2 norm |e|, and relerr is |e|\/|v| *\/$/;"	e	enum:__anonb5c3fad60103
ERROR_LINF	cubature.h	/^     ERROR_LINF \/* abserr is L_\\infty norm |e|, and relerr is |e|\/|v| *\/$/;"	e	enum:__anonb5c3fad60103
ERROR_PAIRED	cubature.h	/^     ERROR_PAIRED, \/* paired L2 norms of errors in each component,$/;"	e	enum:__anonb5c3fad60103
FAILURE	hcubature.c	/^#define FAILURE /;"	d	file:
FFLAGS	Makefile	/^FFLAGS = -O3 -Wall -std=c99 -fopenmp$/;"	m
HBARC	constants.c	/^const double HBARC = 197.3269602; \/\/ (in MeV fm)$/;"	v	typeref:typename:const double
HEADING	utility.h	/^#define HEADING /;"	d
INCX	laguerre_polynomial.c	/^# define INCX /;"	d	file:
KEY	hcubature.c	/^#define KEY(/;"	d	file:
L	tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
LFLAGS	Makefile	/^LFLAGS = -lgomp -lm -lgsl -lgslcblas -lcuba$/;"	m
N	tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
N_MAX	laguerre_polynomial.c	/^# define N_MAX /;"	d	file:
OBJECTS	Makefile	/^OBJECTS = tdho.o constants.o utility.o main.o \\$/;"	m
OPERATOR	utility.h	/^#define OPERATOR /;"	d
PION_MASS	constants.c	/^const double PION_MASS = 134.9770; \/\/ (in MeV\/c^2)$/;"	v	typeref:typename:const double
QNUMS	utility.h	/^#define QNUMS /;"	d
RED_NUCLEON_MASS	constants.c	/^const double RED_NUCLEON_MASS = 469.4593340; \/\/ (in MeV\/c^2)$/;"	v	typeref:typename:const double
R_ES_SQUARED	constants.c	/^const double R_ES_SQUARED = 0.777; $/;"	v	typeref:typename:const double
SHAREDLIBS	Makefile	/^SHAREDLIBS = libcuba.a$/;"	m
SQR	converged.h	/^#    define SQR(/;"	d
SUCCESS	hcubature.c	/^#define SUCCESS /;"	d	file:
TIME_SIZE	laguerre_polynomial.c	/^# define TIME_SIZE /;"	d	file:
VAL	hcubature.c	/^#define VAL(/;"	d	file:
VALS	hcubature.c	/^#         define VALS(/;"	d	file:
__CONSTANTS_H__	constants.h	/^#define __CONSTANTS_H__$/;"	d
__OPERATORS_H__	operators.h	/^#define __OPERATORS_H__$/;"	d
__OPERATOR_ID_H__	operator_id.h	/^#define __OPERATOR_ID_H__$/;"	d
__OPERATOR_R_SQ_H__	operator_r_sq.h	/^#define __OPERATOR_R_SQ_H__$/;"	d
__TDHO_H__	tdho.h	/^#define __TDHO_H__$/;"	d
__UTILITY_H__	utility.h	/^#define __UTILITY_H__$/;"	d
__anon992985d90108	hcubature.c	/^typedef struct {$/;"	s	file:
__anon992985d90208	hcubature.c	/^typedef struct {$/;"	s	file:
__anon992985d90308	hcubature.c	/^typedef struct {$/;"	s	file:
__anon992985d90408	hcubature.c	/^typedef struct {$/;"	s	file:
__anon992985d90508	hcubature.c	/^typedef struct {$/;"	s	file:
__anonb5c3fad60103	cubature.h	/^typedef enum {$/;"	g
absval	converged.h	/^		   double absval = fabs(VAL(j));$/;"	v	typeref:typename:double
alloc_rule_pts	hcubature.c	/^static int alloc_rule_pts(rule *r, unsigned num_regions)$/;"	f	typeref:typename:int	file:
alpha	operator_r_sq.h	/^struct integrand_l_params { int n; double alpha; int np; double alphap; };$/;"	m	struct:integrand_l_params	typeref:typename:double
alphap	operator_r_sq.h	/^struct integrand_l_params { int n; double alpha; int np; double alphap; };$/;"	m	struct:integrand_l_params	typeref:typename:double
b	tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:double
cg_coeff	utility.c	/^double cg_coeff (int ja, int jb, int j, int mja, int mjb, int mj)$/;"	f	typeref:typename:double
clean	Makefile	/^clean:$/;"	t
compute_vol	hcubature.c	/^static double compute_vol(const hypercube *h)$/;"	f	typeref:typename:double	file:
converged	hcubature.c	/^static int converged(unsigned fdim, const esterr *ee,$/;"	f	typeref:typename:int	file:
cubareal	cuba.h	/^typedef double cubareal;$/;"	t	typeref:typename:double
cubature	hcubature.c	/^static int cubature(unsigned fdim, integrand_v f, void *fdata, $/;"	f	typeref:typename:int	file:
cut_region	hcubature.c	/^static int cut_region(region *R, region *R2)$/;"	f	typeref:typename:int	file:
data	hcubature.c	/^     double *data;	\/* length 2*dim = center followed by half-widths *\/$/;"	m	struct:__anon992985d90208	typeref:typename:double *	file:
delta	utility.h	/^inline int delta(int a, int b) { return a == b ? 1 : 0; };$/;"	f	typeref:typename:int
destroy	hcubature.c	/^     destroy_func destroy;$/;"	m	struct:rule_s	typeref:typename:destroy_func	file:
destroy_func	hcubature.c	/^typedef void (*destroy_func)(struct rule_s *r);$/;"	t	typeref:typename:void (*)(struct rule_s * r)	file:
destroy_hypercube	hcubature.c	/^static void destroy_hypercube(hypercube *h)$/;"	f	typeref:typename:void	file:
destroy_region	hcubature.c	/^static void destroy_region(region *R)$/;"	f	typeref:typename:void	file:
destroy_rule	hcubature.c	/^static void destroy_rule(rule *r)$/;"	f	typeref:typename:void	file:
destroy_rule75genzmalik	hcubature.c	/^static void destroy_rule75genzmalik(rule *r_)$/;"	f	typeref:typename:void	file:
dim	hcubature.c	/^     unsigned dim, fdim;         \/* the dimensionality & number of functions *\/$/;"	m	struct:rule_s	typeref:typename:unsigned	file:
dim	hcubature.c	/^     unsigned dim;$/;"	m	struct:__anon992985d90208	typeref:typename:unsigned	file:
ee	hcubature.c	/^     esterr *ee; \/* array of length fdim *\/$/;"	m	struct:__anon992985d90308	typeref:typename:esterr *	file:
ee	hcubature.c	/^     esterr *ee; \/* array of length fdim of the total integrand & error *\/$/;"	m	struct:__anon992985d90508	typeref:typename:esterr *	file:
err	converged.h	/^		   double maxerr, serr, err, maxval, sval, val;$/;"	v	typeref:typename:double
err	converged.h	/^	      double err = 0, val = 0;$/;"	v	typeref:typename:double
err	converged.h	/^	      double maxerr = 0, maxval = 0, serr, sval, err = 0, val = 0;$/;"	v	typeref:typename:double
err	hcubature.c	/^     double val, err;$/;"	m	struct:__anon992985d90108	typeref:typename:double	file:
errMax	hcubature.c	/^static double errMax(unsigned fdim, const esterr *ee)$/;"	f	typeref:typename:double	file:
errmax	hcubature.c	/^     double errmax; \/* max ee[k].err *\/$/;"	m	struct:__anon992985d90308	typeref:typename:double	file:
error_norm	cubature.h	/^} error_norm;$/;"	t	typeref:enum:__anonb5c3fad60103
esterr	hcubature.c	/^} esterr;$/;"	t	typeref:struct:__anon992985d90108	file:
evalError	hcubature.c	/^     evalError_func evalError;$/;"	m	struct:rule_s	typeref:typename:evalError_func	file:
evalError_func	hcubature.c	/^typedef int (*evalError_func)(struct rule_s *r,$/;"	t	typeref:typename:int (*)(struct rule_s * r,unsigned fdim,integrand_v f,void * fdata,unsigned nR,region * R)	file:
evalR0_0fs4d	hcubature.c	/^static void evalR0_0fs4d(double *pts, unsigned dim, double *p, const double *c,$/;"	f	typeref:typename:void	file:
evalRR0_0fs	hcubature.c	/^static void evalRR0_0fs(double *pts, unsigned dim, double *p, const double *c, const double *r)$/;"	f	typeref:typename:void	file:
evalR_Rfs	hcubature.c	/^static void evalR_Rfs(double *pts, unsigned dim, double *p, const double *c, const double *r)$/;"	f	typeref:typename:void	file:
eval_regions	hcubature.c	/^static int eval_regions(unsigned nR, region *R, $/;"	f	typeref:typename:int	file:
f	vwrapper.h	/^typedef struct fv_data_s { integrand f; void *fdata; } fv_data;$/;"	m	struct:fv_data_s	typeref:typename:integrand
fdata	vwrapper.h	/^typedef struct fv_data_s { integrand f; void *fdata; } fv_data;$/;"	m	struct:fv_data_s	typeref:typename:void *
fdim	hcubature.c	/^     unsigned dim, fdim;         \/* the dimensionality & number of functions *\/$/;"	m	struct:rule_s	typeref:typename:unsigned	file:
fdim	hcubature.c	/^     unsigned fdim; \/* dimensionality of vector integrand *\/$/;"	m	struct:__anon992985d90308	typeref:typename:unsigned	file:
fdim	hcubature.c	/^     unsigned fdim;$/;"	m	struct:__anon992985d90508	typeref:typename:unsigned	file:
fv	vwrapper.h	/^static int fv(unsigned ndim, size_t npt,$/;"	f	typeref:typename:int
fv_data	vwrapper.h	/^typedef struct fv_data_s { integrand f; void *fdata; } fv_data;$/;"	t	typeref:struct:fv_data_s
fv_data_s	vwrapper.h	/^typedef struct fv_data_s { integrand f; void *fdata; } fv_data;$/;"	s
h	hcubature.c	/^     hypercube h;$/;"	m	struct:__anon992985d90308	typeref:typename:hypercube	file:
hcubature	hcubature.c	/^int hcubature(unsigned fdim, integrand f, void *fdata, $/;"	f	typeref:typename:int
hcubature_v	hcubature.c	/^int hcubature_v(unsigned fdim, integrand_v f, void *fdata, $/;"	f	typeref:typename:int
heap	hcubature.c	/^} heap;$/;"	t	typeref:struct:__anon992985d90508	file:
heap_alloc	hcubature.c	/^static heap heap_alloc(size_t nalloc, unsigned fdim)$/;"	f	typeref:typename:heap	file:
heap_free	hcubature.c	/^static void heap_free(heap *h)$/;"	f	typeref:typename:void	file:
heap_item	hcubature.c	/^typedef region heap_item;$/;"	t	typeref:typename:region	file:
heap_pop	hcubature.c	/^static heap_item heap_pop(heap *h)$/;"	f	typeref:typename:heap_item	file:
heap_push	hcubature.c	/^static int heap_push(heap *h, heap_item hi)$/;"	f	typeref:typename:int	file:
heap_push_many	hcubature.c	/^static int heap_push_many(heap *h, size_t ni, heap_item *hi)$/;"	f	typeref:typename:int	file:
heap_resize	hcubature.c	/^static void heap_resize(heap *h, size_t nalloc)$/;"	f	typeref:typename:void	file:
hypercube	hcubature.c	/^} hypercube;$/;"	t	typeref:struct:__anon992985d90208	file:
i4_max	laguerre_polynomial.c	/^int i4_max ( int i1, int i2 )$/;"	f	typeref:typename:int
i4_min	laguerre_polynomial.c	/^int i4_min ( int i1, int i2 )$/;"	f	typeref:typename:int
imtqlx	laguerre_polynomial.c	/^void imtqlx ( int n, double d[], double e[], double z[] )$/;"	f	typeref:typename:void
integrand	cubature.h	/^typedef int (*integrand) (unsigned ndim, const double *x, void *,$/;"	t	typeref:typename:int (*)(unsigned ndim,const double * x,void *,unsigned fdim,double * fval)
integrand_l_params	operator_r_sq.h	/^struct integrand_l_params { int n; double alpha; int np; double alphap; };$/;"	s
integrand_l_params	operator_r_sq.h	/^typedef struct integrand_l_params integrand_l_params;$/;"	t	typeref:struct:integrand_l_params
integrand_t	cuba.h	/^typedef int (*integrand_t)(const int *ndim, const cubareal x[],$/;"	t	typeref:typename:int (*)(const int * ndim,const cubareal x[],const int * ncomp,cubareal f[],void * userdata)
integrand_v	cubature.h	/^typedef int (*integrand_v) (unsigned ndim, size_t npt,$/;"	t	typeref:typename:int (*)(unsigned ndim,size_t npt,const double * x,void *,unsigned fdim,double * fval)
isequal_q_nums	tdho.c	/^bool isequal_q_nums(q_nums *ket, q_nums *bra)$/;"	f	typeref:typename:bool
isequal_wf_params	tdho.c	/^bool isequal_wf_params(wf_params *ket, wf_params *bra)$/;"	f	typeref:typename:bool
isqr	hcubature.c	/^static int isqr(int x)$/;"	f	typeref:typename:int	file:
items	hcubature.c	/^     heap_item *items;$/;"	m	struct:__anon992985d90508	typeref:typename:heap_item *	file:
j	converged.h	/^     unsigned j;$/;"	v	typeref:typename:unsigned
j	tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
l	tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
l	tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:int
l_exponential_product	laguerre_polynomial.c	/^double *l_exponential_product ( int p, double b )$/;"	f	typeref:typename:double *
l_integral	laguerre_polynomial.c	/^double l_integral ( int n )$/;"	f	typeref:typename:double
l_polynomial	laguerre_polynomial.c	/^double *l_polynomial ( int m, int n, double x[] )$/;"	f	typeref:typename:double *
l_polynomial_coefficients	laguerre_polynomial.c	/^double *l_polynomial_coefficients ( int n )$/;"	f	typeref:typename:double *
l_polynomial_values	laguerre_polynomial.c	/^void l_polynomial_values ( int *n_data, int *n, double *x, double *fx )$/;"	f	typeref:typename:void
l_polynomial_zeros	laguerre_polynomial.c	/^double *l_polynomial_zeros ( int n )$/;"	f	typeref:typename:double *
l_power_product	laguerre_polynomial.c	/^double *l_power_product ( int p, int e )$/;"	f	typeref:typename:double *
l_quadrature_rule	laguerre_polynomial.c	/^void l_quadrature_rule ( int n, double x[], double w[] )$/;"	f	typeref:typename:void
lf_function	laguerre_polynomial.c	/^double *lf_function ( int mm, int n, double alpha, double x[] )$/;"	f	typeref:typename:double *
lf_function_values	laguerre_polynomial.c	/^void lf_function_values ( int *n_data, int *n, double *a, double *x,$/;"	f	typeref:typename:void
lf_function_zeros	laguerre_polynomial.c	/^double *lf_function_zeros ( int n, double alpha )$/;"	f	typeref:typename:double *
lf_integral	laguerre_polynomial.c	/^double lf_integral ( int n, double alpha )$/;"	f	typeref:typename:double
lf_quadrature_rule	laguerre_polynomial.c	/^void lf_quadrature_rule ( int n, double alpha, double x[], double w[] )$/;"	f	typeref:typename:void
lm_integral	laguerre_polynomial.c	/^double lm_integral ( int n, int m )$/;"	f	typeref:typename:double
lm_polynomial	laguerre_polynomial.c	/^double *lm_polynomial ( int mm, int n, int m, double x[] )$/;"	f	typeref:typename:double *
lm_polynomial_coefficients	laguerre_polynomial.c	/^double *lm_polynomial_coefficients ( int n, int m )$/;"	f	typeref:typename:double *
lm_polynomial_values	laguerre_polynomial.c	/^void lm_polynomial_values ( int *n_data, int *n, int *m, double *x,$/;"	f	typeref:typename:void
lm_polynomial_zeros	laguerre_polynomial.c	/^double *lm_polynomial_zeros ( int n, int m )$/;"	f	typeref:typename:double *
lm_quadrature_rule	laguerre_polynomial.c	/^void lm_quadrature_rule ( int n, int m, double x[], double w[] )$/;"	f	typeref:typename:void
ls0	hcubature.c	/^static unsigned ls0(unsigned n)$/;"	f	typeref:typename:unsigned	file:
main	main.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	main.py	/^def main():$/;"	f
main.exe	Makefile	/^main.exe: $(OBJECTS)$/;"	t
make_hypercube	hcubature.c	/^static hypercube make_hypercube(unsigned dim, const double *center, const double *halfwidth)$/;"	f	typeref:typename:hypercube	file:
make_hypercube_range	hcubature.c	/^static hypercube make_hypercube_range(unsigned dim, const double *xmin, const double *xmax)$/;"	f	typeref:typename:hypercube	file:
make_region	hcubature.c	/^static region make_region(const hypercube *h, unsigned fdim)$/;"	f	typeref:typename:region	file:
make_rule	hcubature.c	/^static rule *make_rule(size_t sz, \/* >= sizeof(rule) *\/$/;"	f	typeref:typename:rule *	file:
make_rule15gauss	hcubature.c	/^static rule *make_rule15gauss(unsigned dim, unsigned fdim)$/;"	f	typeref:typename:rule *	file:
make_rule75genzmalik	hcubature.c	/^static rule *make_rule75genzmalik(unsigned dim, unsigned fdim)$/;"	f	typeref:typename:rule *	file:
maxerr	converged.h	/^		   double maxerr, serr, err, maxval, sval, val;$/;"	v	typeref:typename:double
maxerr	converged.h	/^	      double maxerr = 0, maxval = 0, serr, sval, err = 0, val = 0;$/;"	v	typeref:typename:double
maxval	converged.h	/^		   double maxerr, serr, err, maxval, sval, val;$/;"	v	typeref:typename:double
maxval	converged.h	/^	      double maxerr = 0, maxval = 0, serr, sval, err = 0, val = 0;$/;"	v	typeref:typename:double
mj	tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
ml	tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:int
mt	tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
n	hcubature.c	/^     size_t n, nalloc;$/;"	m	struct:__anon992985d90508	typeref:typename:size_t	file:
n	operator_r_sq.h	/^struct integrand_l_params { int n; double alpha; int np; double alphap; };$/;"	m	struct:integrand_l_params	typeref:typename:int
n	tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
n	tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	m	struct:wf_params	typeref:typename:int
nalloc	hcubature.c	/^     size_t n, nalloc;$/;"	m	struct:__anon992985d90508	typeref:typename:size_t	file:
norm_nl	tdho.c	/^double norm_nl(const wf_params *params)$/;"	f	typeref:typename:double
np	operator_r_sq.h	/^struct integrand_l_params { int n; double alpha; int np; double alphap; };$/;"	m	struct:integrand_l_params	typeref:typename:int
num0_0	hcubature.c	/^#define num0_0(/;"	d	file:
numR0_0fs	hcubature.c	/^#define numR0_0fs(/;"	d	file:
numRR0_0fs	hcubature.c	/^#define numRR0_0fs(/;"	d	file:
numR_Rfs	hcubature.c	/^#define numR_Rfs(/;"	d	file:
num_points	hcubature.c	/^     unsigned num_points;       \/* number of evaluation points *\/$/;"	m	struct:rule_s	typeref:typename:unsigned	file:
num_regions	hcubature.c	/^     unsigned num_regions; \/* max number of regions evaluated at once *\/$/;"	m	struct:rule_s	typeref:typename:unsigned	file:
operator_id	operator_id.c	/^double operator_id(q_nums *i_nums, q_nums *f_nums, double *b) {$/;"	f	typeref:typename:double
operator_id_1b	operator_id.c	/^double operator_id_1b(q_nums *i_nums, q_nums *f_nums) {$/;"	f	typeref:typename:double
operator_id_2b	operator_id.c	/^double operator_id_2b(q_nums *i_nums, q_nums *f_nums, double *b) {$/;"	f	typeref:typename:double
operator_r_sq	operator_r_sq.c	/^double operator_r_sq(char *order, q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
p	hcubature.c	/^     double *widthLambda, *widthLambda2, *p;$/;"	m	struct:__anon992985d90408	typeref:typename:double ***	file:
parent	hcubature.c	/^     rule parent;$/;"	m	struct:__anon992985d90408	typeref:typename:rule	file:
peakfinder_t	cuba.h	/^typedef void (*peakfinder_t)(const int *ndim, const cubareal b[],$/;"	t	typeref:typename:void (*)(const int * ndim,const cubareal b[],int * n,cubareal x[],void * userdata)
plm	operator_r_sq.c	/^double plm(int l, int m)$/;"	f	typeref:typename:double
print_preamble	utility.c	/^void print_preamble(char *my_operator, char *my_constants)$/;"	f	typeref:typename:void
print_rme	main.c	/^void print_rme(char *operator, char *order, q_nums *ket,$/;"	f	typeref:typename:void
pts	hcubature.c	/^     double *pts; \/* points to eval: num_regions * num_points * dim *\/$/;"	m	struct:rule_s	typeref:typename:double *	file:
q_nums	tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	s
q_nums	tdho.h	/^typedef struct q_nums q_nums;$/;"	t	typeref:struct:q_nums
r8_abs	laguerre_polynomial.c	/^double r8_abs ( double x )$/;"	f	typeref:typename:double
r8_epsilon	laguerre_polynomial.c	/^double r8_epsilon ( )$/;"	f	typeref:typename:double
r8_factorial	laguerre_polynomial.c	/^double r8_factorial ( int n )$/;"	f	typeref:typename:double
r8_gamma	laguerre_polynomial.c	/^double r8_gamma ( double x )$/;"	f	typeref:typename:double
r8_sign	laguerre_polynomial.c	/^double r8_sign ( double x )$/;"	f	typeref:typename:double
r8mat_print	laguerre_polynomial.c	/^void r8mat_print ( int m, int n, double a[], char *title )$/;"	f	typeref:typename:void
r8mat_print_some	laguerre_polynomial.c	/^void r8mat_print_some ( int m, int n, double a[], int ilo, int jlo, int ihi,$/;"	f	typeref:typename:void
r8vec2_print	laguerre_polynomial.c	/^void r8vec2_print ( int n, double a1[], double a2[], char *title )$/;"	f	typeref:typename:void
r8vec_dot_product	laguerre_polynomial.c	/^double r8vec_dot_product ( int n, double a1[], double a2[] )$/;"	f	typeref:typename:double
r8vec_print	laguerre_polynomial.c	/^void r8vec_print ( int n, double a[], char *title )$/;"	f	typeref:typename:void
r_sq_bare	operator_r_sq.c	/^double r_sq_bare(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
r_sq_lo	operator_r_sq.c	/^double r_sq_lo(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
r_sq_n2lo	operator_r_sq.c	/^double r_sq_n2lo(q_nums *ket, q_nums *bra, double *b)$/;"	f	typeref:typename:double
radial_1d	operator_id.c	/^double radial_1d(double p, void *gsl_params) {$/;"	f	typeref:typename:double
radial_integral_bare	operator_r_sq.c	/^double radial_integral_bare(int ni, int li, int nf, int lf, double b)$/;"	f	typeref:typename:double
radial_integral_lo	operator_r_sq.c	/^double radial_integral_lo(int ni, int li, int nf, int lf, double b)$/;"	f	typeref:typename:double
radial_nl	tdho.c	/^double radial_nl(double p, const wf_params *params)$/;"	f	typeref:typename:double
real	hcubature.c	/^#define real(/;"	d	file:
region	hcubature.c	/^} region;$/;"	t	typeref:struct:__anon992985d90308	file:
rule	hcubature.c	/^} rule;$/;"	t	typeref:struct:rule_s	file:
rule15gauss_evalError	hcubature.c	/^static int rule15gauss_evalError(rule *r,$/;"	f	typeref:typename:int	file:
rule75genzmalik	hcubature.c	/^} rule75genzmalik;$/;"	t	typeref:struct:__anon992985d90408	file:
rule75genzmalik_evalError	hcubature.c	/^static int rule75genzmalik_evalError(rule *r_, unsigned fdim, integrand_v f, void *fdata, unsign/;"	f	typeref:typename:int	file:
rule_s	hcubature.c	/^typedef struct rule_s {$/;"	s	file:
s	tdho.h	/^struct q_nums { int n; int l; int N; int L; int s;$/;"	m	struct:q_nums	typeref:typename:int
serr	converged.h	/^		   double maxerr, serr, err, maxval, sval, val;$/;"	v	typeref:typename:double
serr	converged.h	/^	      double maxerr = 0, maxval = 0, serr, sval, err = 0, val = 0;$/;"	v	typeref:typename:double
set_q_nums	tdho.c	/^void set_q_nums(q_nums *nums, int n, int l, int N, int L,$/;"	f	typeref:typename:void
spherical_integral_lo	operator_r_sq.c	/^double spherical_integral_lo(int li, int mli, int lf, int mlf)$/;"	f	typeref:typename:double
splitDim	hcubature.c	/^     unsigned splitDim;$/;"	m	struct:__anon992985d90308	typeref:typename:unsigned	file:
sval	converged.h	/^		   double maxerr, serr, err, maxval, sval, val;$/;"	v	typeref:typename:double
sval	converged.h	/^	      double maxerr = 0, maxval = 0, serr, sval, err = 0, val = 0;$/;"	v	typeref:typename:double
t	tdho.h	/^    int j; int mj; int t; int mt; };$/;"	m	struct:q_nums	typeref:typename:int
timestamp	laguerre_polynomial.c	/^void timestamp ( void )$/;"	f	typeref:typename:void
to_int	hcubature.c	/^#define to_int(/;"	d	file:
val	converged.h	/^		   double maxerr, serr, err, maxval, sval, val;$/;"	v	typeref:typename:double
val	converged.h	/^	      double err = 0, val = 0;$/;"	v	typeref:typename:double
val	converged.h	/^	      double maxerr = 0, maxval = 0, serr, sval, err = 0, val = 0;$/;"	v	typeref:typename:double
val	hcubature.c	/^     double val, err;$/;"	m	struct:__anon992985d90108	typeref:typename:double	file:
vals	hcubature.c	/^     double *vals; \/* num_regions * num_points * fdim *\/$/;"	m	struct:rule_s	typeref:typename:double *	file:
vol	hcubature.c	/^     double vol;	\/* cache volume = product of widths *\/$/;"	m	struct:__anon992985d90208	typeref:typename:double	file:
wavefunc_nlm_imag	tdho.c	/^double wavefunc_nlm_imag(double p, double theta,$/;"	f	typeref:typename:double
wavefunc_nlm_real	tdho.c	/^double wavefunc_nlm_real(double p, double theta,$/;"	f	typeref:typename:double
weight1	hcubature.c	/^     double weight1, weight3, weight5;$/;"	m	struct:__anon992985d90408	typeref:typename:double	file:
weight3	hcubature.c	/^     double weight1, weight3, weight5;$/;"	m	struct:__anon992985d90408	typeref:typename:double	file:
weight5	hcubature.c	/^     double weight1, weight3, weight5;$/;"	m	struct:__anon992985d90408	typeref:typename:double	file:
weightE1	hcubature.c	/^     double weightE1, weightE3;$/;"	m	struct:__anon992985d90408	typeref:typename:double	file:
weightE3	hcubature.c	/^     double weightE1, weightE3;$/;"	m	struct:__anon992985d90408	typeref:typename:double	file:
wf_params	tdho.h	/^struct wf_params { int n; int l; int ml; double b; };$/;"	s
wf_params	tdho.h	/^typedef struct wf_params wf_params;$/;"	t	typeref:struct:wf_params
widthLambda	hcubature.c	/^     double *widthLambda, *widthLambda2, *p;$/;"	m	struct:__anon992985d90408	typeref:typename:double *	file:
widthLambda2	hcubature.c	/^     double *widthLambda, *widthLambda2, *p;$/;"	m	struct:__anon992985d90408	typeref:typename:double **	file:
y_lm_imag	tdho.c	/^double y_lm_imag(double theta, double phi, const wf_params *params)$/;"	f	typeref:typename:double
y_lm_real	tdho.c	/^double y_lm_real(double theta, double phi, const wf_params *params)$/;"	f	typeref:typename:double
